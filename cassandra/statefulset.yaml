apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cassandra
  labels:
    app: cassandra
spec:
  serviceName: cassandra
  replicas: 1
  selector:
    matchLabels:
      app: cassandra
  template:
    metadata:
      labels:
        app: cassandra
    spec:
      containers:
      - name: cassandra
        image: cassandra:3.11.5
        command: ["/bin/sh"]
        args:
          - -ec
          - |
            cp /cassandra_config/cassandra.yaml /etc/cassandra/cassandra.yaml
            cp /cassandra_config/cassandra-rackdc.properties /etc/cassandra/cassandra-rackdc.properties
            /docker-entrypoint.sh
        imagePullPolicy: Always
        ports:
        - containerPort: 7000
          name: intra-node
        - containerPort: 7001
          name: tls-intra-node
        - containerPort: 7199
          name: jmx
        - containerPort: 9042
          name: cql
        resources:
          limits:
            cpu: "500m"
            memory: 1Gi
          requests:
            cpu: "500m"
            memory: 1Gi
        securityContext:
          capabilities:
            add:
              - IPC_LOCK
        lifecycle:
          preStop:
            exec:
              command: 
              - /bin/sh
              - -c
              - nodetool drain
        env:
          - name: MAX_HEAP_SIZE
            value: 512M
          - name: HEAP_NEWSIZE
            value: 100M
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - 'if [[ $(nodetool status | grep $POD_IP) == *"UN"* ]]; then exit 0; else exit 1; fi'
          initialDelaySeconds: 15
          timeoutSeconds: 5
        volumeMounts:
        - name: cassandra-data
          mountPath: /var/lib/cassandra
        - name: certs
          mountPath: /usr/local/lib/cassandra/conf/
        - name: config-volume
          mountPath: /cassandra_config/
      initContainers:
      - name: fetch-certs
        image: nathanmyles/vault-client:0.1.0
        command: ["/bin/sh"]
        args:
          - -ec
          - |
            export VAULT_ADDR="http://vault.default.svc.cluster.local:8200"
            export VAULT_FORMAT="json"
            vault login roottoken
            vault write pki/issue/cassandra-default \
              common_name=${HOSTNAME}.cassandra.default.svc.cluster.local > /certs/certs.json
            cat /certs/certs.json | jq -r .data.certificate > /certs/certificate.pem
            cat /certs/certs.json | jq -r .data.issuing_ca > /certs/issuing_ca.pem
            cat /certs/certs.json | jq -r .data.private_key > /certs/private_key.pem
        volumeMounts:
          - name: certs
            mountPath: "/certs"
      - name: format-certs
        image: openjdk:8-jre-stretch
        command: ["/bin/sh"]
        args:
          - -ec
          - |
            openssl pkcs12 -export -out /certs/private_key.pkcs12 -in /certs/certificate.pem -inkey /certs/private_key.pem -passin pass: -passout pass:abcdef
            keytool -genkey -keyalg RSA -alias endeca -keystore /certs/truststore.jks -storepass abcdef <<EOF
            ${HOSTNAME}.cassandra.default.svc.cluster.local
            Unknown
            Unknown
            Unknown
            Unknown
            Unknown
            yes
            yes
            EOF
            keytool -delete -alias endeca -keystore /certs/truststore.jks -storepass abcdef
            keytool -import -v -trustcacerts -alias endeca-ca -file /certs/issuing_ca.pem -keystore /certs/truststore.jks -storepass abcdef <<EOF
            yes
            EOF
            keytool -genkey -keyalg RSA -alias endeca -keystore /certs/keystore.jks -storepass abcdef<<EOF
            ${HOSTNAME}.cassandra.default.svc.cluster.local
            Unknown
            Unknown
            Unknown
            Unknown
            Unknown
            yes
            yes
            EOF
            keytool -delete -alias endeca -keystore /certs/keystore.jks -storepass abcdef
            keytool -v -importkeystore -srckeystore /certs/private_key.pkcs12 -srcstoretype PKCS12 -destkeystore /certs/keystore.jks -deststoretype JKS -storepass abcdef --srcstorepass abcdef <<EOF
            yes
            EOF
        volumeMounts:
          - name: certs
            mountPath: "/certs"
      volumes:
        - name: certs
          emptyDir: {}
        - name: config-volume
          configMap:
            name: cassandra-config
            defaultMode: 0775
  volumeClaimTemplates:
  - metadata:
      name: cassandra-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: fast
      resources:
        requests:
          storage: 1Gi
